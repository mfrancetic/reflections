How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    It helped because it extracted only the differences between the old and new file, so 
I didn't have to go through all of the code lines. It made the process faster.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    Having easy access to the entire history of a file could make me a more efficient
programmer in the long term, because if a bug appears, I can always go back to the
previous version, compare the differences and easily solve the problem.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    The pros of manually choosing when to create a commit are that I can make logical versions which are not too small or too big to understand and can explain them in a short message. The cons are that I would have to create a commit each time when I do something important - while having versions automatically saved
saves time.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    I think some version control systems allow saving multiple files in one commit, like Git,
because applications have multiple activities and files connected to each other, that need
to be simultanously updated, since changing something in one file effects the other; and others, like Google Docs, treat each file separately because
the files aren't connected and don't depend on each other. 

How can you use the commands git log and git diff to view the history of files?

    The git log shows the details of all the commits (ID, author, date, message) through which we can scroll and see what has changed
with each commit. Git diff shows us the differences between two files (what has been added and deleted).

How might using version control make you more confident to make changes that
could break something?

    Using version control makes me more confident to make changes that could break something
because I can always go back to the previous version, before the bug was introduced.

Now that you have your workspace set up, what do you want to try using Git for?

    I would like to try using Git for creating repositories of the projects I previously built, so I can continue working on them, while using version control. This way I will be able to experiment doing changes on the project in a more secure way.