What happens when you initialize a repository? Why do you need to do it?
- We create a repository inside a directory, which means that it now collects metadata about the history of the repository, so we are able to use version control.


How is the staging area different from the working directory and the repository?
What value do you think it offers?
- The staging area is the the area in which the files from the working directory are added before being commited to the repository. It enables us to prepare the files we would like to be tracked, but we can still change our mind and by using the "reset" function remove the files from the staging area (this will still keep them in the working directory).

How can you use the staging area to make sure you have one commit per logical
change?
- We can use the staging area to make sure we only have one commit per logical change, since we can compare the staging area with the most recent commit by git diff --staged and see what exactly has been changed.


What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
- Branches would be helpful when we create two different versions of the application (for example, with a different language, or we experiment with a big change, while still developing the original application). Branches are useful here because can simultanously develop different versions of the applications.


How do the diagrams help you visualize the branch structure?
- The diagrams help me visualize the branch structure, since I can see exactly which commits are included in which branch, and which previous versions I can reach through which branch.


What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?



What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

